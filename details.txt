Got it! You want a **simple, minimal but complete implementation** of the blockchain-based **Product Evaluation Management System** based on the paper, using:

* **Ganache CLI** (local Ethereum blockchain)
* **MetaMask** (wallet to interact with the contracts)
* Basic Solidity smart contracts (ProductContract and AuxiliaryContract)
* A minimal frontend to add products, add comments/reviews, and search by keyword
* Use IPFS hash storage in contracts (simulate or hardcode IPFS hash)
* Keep it **simple** with only necessary features (no complex incentive logic, just basics)

---

# Here's a **simple full example**:

---

## 1. **File Structure**

```
pem-blockchain/
├── contracts/
│   ├── ProductContract.sol
│   └── AuxiliaryContract.sol
├── migrations/
│   └── 1_deploy_contracts.js
├── public/
│   ├── index.html
│   ├── app.js
│   └── styles.css
├── package.json
├── truffle-config.js
└── README.md
```



## 2. **How to Run**

1. **Install dependencies**

```bash
npm init -y
npm install truffle web3
```

2. **Start Ganache CLI**

```bash
ganache-cli
```

3. **Compile and deploy contracts**

```bash
npx truffle compile
npx truffle migrate --network development
```

4. **Update `productContractAddress` in `app.js`**

* After migration, Truffle will show deployed contract addresses.
* Copy `ProductContract` address and paste it in `public/app.js` replacing `"REPLACE_WITH_DEPLOYED_ADDRESS"`.

5. **Serve frontend**

* Use any simple server, e.g.,

```bash
npx serve public
```

or

```bash
python3 -m http.server 8080 --directory public
```

6. **Connect MetaMask**

* Setup MetaMask to connect to your Ganache CLI RPC (usually `http://127.0.0.1:8545`)
* Import Ganache CLI accounts into MetaMask using their private keys.

7. **Use the dApp**

* Add products (simulate IPFS hash with any string)
* Add comments with ratings and keywords
* list all products

---

## Summary

* Simple Solidity contracts for products, comments, keyword indexing
* Basic frontend to add products/comments and search
* Use Ganache CLI + MetaMask only (no IPFS integration in frontend for simplicity; just simulate IPFS hashes)
* Easy to extend and improve

./start-ganache.sh